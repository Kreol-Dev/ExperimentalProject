locations_filler =
{
	scope = space.fit(places = 0)
	utility = 1
	action = 
	{
		space = 
		{
			size = 5
			repeat(random(1,4)) = 
			{
				generate(loc) = 
				{
					entity = 
					{
						on_destruction = 
						{
							entity.space_marker.current_space.detach = place
						}
					}
					place = 
					{
						size = random(1, 3)
					}
					named = 
					{
						set("prefix", 0) = "Location of: "
						set("main_name", 1) = random_name
					}
				}

				attach = loc.place
			}
		}
	}
}

named_ui = 
{
	scope = ui_object.fit(showed_object.fit(has(named)) and not has(named_ui_marker))
	utility = 1 
	action = 
	{
		create = named_ui_marker
		ui_object = 
		{
			showed_named = showed_object.named
			create(fld, text_field) = {
				set = showed_named.full_name
				showed_named.on_update = {
					fld.set = showed_named.full_name
				}
			}
			
		}
	}
}

agents_pool_filler = {
	scope = markers.place.fit(agents = 0 and has_marker("agents_pool"))
	utility = 1
	action = {
		place = {
			size = 5
			repeat(random(1,4)) = {
				generate(ag) = {
					entity = {
						on_destruction = {
							entity.place_marker.current_place.detach = agent
						}
					}
					agent = yes
					human = {
						age = random(20, 45)
					}
					named = {
						set("prefix", 0) = "Agent: "
						set("main_name", 1) = random_name
					}
				}

				attach = ag.agent
			}
		}
	}
}

location_event = {
	scope = place.fit(not has(event_marker))
	utility = 1
	action = {
		create = event_marker
	}
}
agent_personality = {
	scope = agent.fit(not has(personality))
	utility = 1
	action = {
		create = personality
	}
}

aged_generation_add = {
	scope = human.fit(not has(aged_generation))
	utility = 1
	action = {
		create = aged_generation
	}
}

historical_persons = 
{
	scope = markers.lore.place.fit(agents = 0 and has_marker("lore_pool"))
	utility = 1 
	action = 
	{
		place = {
			size = 5
			repeat(random(4,10)) = {
				generate(ag) = {
					entity = {
						on_destruction = {
							entity.place_marker.current_place.detach = agent
						}
					}
					agent = yes
					historical_person = yes
					human = {
						age = random(20, 45)
					}
					named = {
						set("prefix", 0) = "Historical person: "
						set("main_name", 1) = random_name
					}
				}

				attach = ag.agent
			}
		}
	}
}

change_name_historical_action = 
{
	scope = historical_person.named.agent.fit(act = yes)
	utility = 0.3
	action = {
		named.switch("main_name") = random_name
	}
}