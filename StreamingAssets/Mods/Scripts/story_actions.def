war_conflict = 
{
	only_max_utility = yes
	category = conflict_decomposition
	once_per_object = yes
	scope = conflict
	utility = 1
	action = 
	{
		generate(first_foe) = 
		{
			entity = yes
			foe_role = yes
			actor = yes
		}

		generate(second_foe) =
		{
			entity = yes
			actor = yes
			foe_role = 
			{
				enemy = first_foe
			}
		}

		first_foe.foe_role.enemy = second_foe
	}
}

foe_is_ruler = 
{
	only_max_utility = yes
	category = foe_decomposition
	once_per_object = yes
	scope = foe_role
	utility = 1
	action = 
	{
		create(ruler_role) = 
		{
			forces = random(10, 20)
			people = 1
		}
	}
}

ruler_as_person = 
{
	once_per_object = yes
	utility = 1
	scope = ruler_role.markers
	action = {
		markers.set_marker = is_person
	}
}
genius_as_person = 
{
	once_per_object = yes
	utility = 1
	scope = worker.builder.markers
	action = {
		markers.set_marker = is_person
	}
}
as_person = 
{
	once_per_object = yes
	utility = 1
	scope = markers.fit(has_marker(is_person))
	action = 
	{
		create(aged) = 
		{
			age = random(30, 60)
		}
		create(attributes) = 
		{
			charisma = random(1, 10)
			intellect = random(1, 10)
			military = random(1, 10)
			mental = random(1, 10)
			health = random(1, 10)
		}
		create(personality) =
		{
			brave = random(0, 0.1)
			rational = random(0, 0.1)
			optimistic = random(0, 0.1)
			cruel = random(0, 0.1)
			ambitious = random(0, 0.1)
			reckless = random(0, 0.1)
		}

	}
}

ruler_vs_ruler = 
{
	once_per_turn = yes
	scope = actor.foe_role.ruler_role.fit(enemy.ruler_role.true and not is_active)
	utility = 1
	action = 
	{
		my_forces = ruler_role.forces
		enemy_forces = foe_role.enemy.ruler_role.forces
		foe_role = {
			if(not (my_forces = 0)).threat_level = enemy_forces / my_forces
			if(my_forces = 0 or threat_level > 1000).threat_level = 1000
		}
		
	}
}


start_a_war = 
{
	scope = actor.foe_role.ruler_role.fit(enemy.fit(has(ruler_role)) and not contains(at_war_with, enemy) and is_active)
	utility = 1
	action = 
	{
		foe_role =
		{
			ruler_role.add_to(at_war_with) = enemy
			enemy.ruler_role = 
			{
				add_to(at_war_with) = root
			}
		}
		

		generate(event_war_declaration) = 
		{
			event = {
				context = root
			}
			war_declaration = yes
			targeted_event = 
			{
				target = root.foe_role.enemy
			}
		}
	}
}

gather_reinforcements = 
{
	scope = actor.foe_role.ruler_role.fit(is_active)
	utility = (ruler_role.current_campaign.campaign_event.forces_involved / 
		foe_role.enemy.ruler_role.current_campaign.campaign_event.forces_involved) - 1 + (ruler_role.people - 0.5)
	action = 
	{
		spawn(gather_reinforcements) = 
		{
			notify_event = 
			{
				who = root
				data = "gather_reinforcements"
			}
		}
		ruler_role = 
		{
			forces = forces + 7
			people = people - 0.1
		}
	}
}

growth = 
{
	scope = actor.ruler_role.fit(people < 1 and not is_active)
	utility = 1
	once_per_turn = yes
	action = 
	{
		ruler_role.people = people * 1.2
	}
}
order_a_wunderwaffe = 
{
	once_per_object = yes
	scope = actor.ruler_role.foe_role.fit(is_active and contains(at_war_with, enemy))
	utility = foe_role.threat_level * 0.3
	action = 
	{
		generate(wunder_waffe) = 
		{
			actor = yes
			buildable = 
			{
				cost = 20
			}
			old_weapon = yes
		}
		ruler_role.wunderwaffe = wunder_waffe
	}
}

genius_found = 
{
	once_per_object = yes
	scope = actor.ruler_role.fit(wunderwaffe.old_weapon.buildable.true and not is_active)
	utility = 1
	action = 
	{
		generate(genius) = 
		{
			markers = yes
			actor = yes
			worker = 
			{
				works_for = root
			}
			builder = yes
		}
	}
}

lead_campaign = 
{
	scope = actor.ruler_role.foe_role.fit(is_active and contains(at_war_with, enemy) and enemy.ruler_role.true and not has(current_campaign))
	utility = 1.0 / foe_role.threat_level
	action = 
	{
		generate(campaign) = 
		{
			event = {
				context = root
			}
			targeted_event = 
			{
				target = root.foe_role.enemy
			}
			campaign_event = {
				forces_involved = root.ruler_role.forces 
			}
			markers = yes
		}
		ruler_role.forces = 0
		ruler_role.current_campaign = campaign
	}
}

end_campaign = 
{

	scope = actor.ruler_role.foe_role.fit(is_active and contains(at_war_with, enemy) and enemy.ruler_role.true and has(current_campaign))
	utility = 1.0 - ruler_role.current_campaign.campaign_event.forces_involved
	action = 
	{
		return_forces = 0
		current_campaign.campaign_event = 
		{
			return_forces = forces_involved
			forces_involved = 0
		}
		
		ruler_role.forces = forces + return_forces
		current_campaign = nothing
	}
}

build_wunderwaffe = 
{
	scope = actor.builder.worker.fit(is_active and 
		works_for.ruler_role.fit(wunderwaffer.buildable.true and not wunderwaffe.buildable.finished))
	utility = 1
	action = 
	{
		spawn(build_wunderwaffe) = 
		{
			notify_event = {
				who = root
				data = "build_wunderwaffe"
			}
		}
		worker.works_for.ruler_role.wunderwaffe.buildable =
		{
			current_investment = current_investment + 5
			if(current_investment >= cost).finished = yes
		}
		
	}
}

test_wunderwaffe = 
{
	scope = actor.ruler_role.foe_role.fit(
		is_active and contains(at_war_with, enemy) and
		enemy.ruler_role.true and has(wunderwaffe) and
		wunderwaffe.buildable.finished)
	once_per_object = yes
	utility = foe_role.threat_level * 0.5
	action = 
	{
		spawn(test_wunderwaffe) = 
		{
			notify_event = 
			{
				who = root
				data = "test_wunderwaffe"
			}
		}
		foe_role.enemy.ruler_role = {
			forces = forces - 10
			people = 0
		}
	}

}

