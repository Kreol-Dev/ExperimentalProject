--Всё начинается с того, что нужен генератор для объекта в целом. Что это - действие, событие, генератор, класс который получает тип
--и формирует его DOM.
name_generator = 
{
	--Он может обращаться к элементам напрямую. Например ActionGenerator точно знает, что должен быть элемент scope и
	--элемент action
	--При этом сами они будут генерироваться уже другими классами. Какие-то общими, какие-то нет.
	--Таким образом нужно будет проводить уже семантический анализ, где узлами будут генераторы и тд. 
	--В принципе это должно быть сравнительно несложно в связи с устоявшимся деревом без абстракций и исключений.
	--Нужно снова написать примерный код
	--И написать несколько новых скриптов, для событий и ИИ.
	scope = has_name
	action = 
	{
		set_name = concat(random_from(names_scope, most_weight(fallback_names, new_name(culture_names, "Error name"))), 
							" ", 
							single_from(second_name, "Error second name"))
		names_scope = 
		{
			union = {faction_names traits_names} 
			intersect = culture_names
		}
		fallback_names = 
		{
			union = {faction_names traits_names}
			weight = similar_traits(traits_names)
		}
		xyz(1 - 1 + 2 * 2 * (2 - (-1)) + 2) = { z = val }
		second_name =
		{
			if(sex = female and family_status = married, h_name) = {union = husband_name}
			if(has_family and not h_name, f_name) = {union = family_name}
			if(not h_name and not f_name) = {union = new_name(culture_second_names)}
		}
		set(generated) = true
	} 
}
--По идее - высокоуровневый контроллер рабочего - объекта у которого может быть работа на которую можно ходить
worker_cycle =
{

}
--Действие, при котором рабочий должен выйти из дома и пойти на работу. Может быть не у всех, у кого есть worker_cycle
--Посещать работу можно несколькими способами в общем
work_at =
{


}

--Событие на что-то
enter_ruin =
{

}

continue_ruin = 
{

}
continue_ruin = 
{
	
}
continue_ruin = 
{
	
}